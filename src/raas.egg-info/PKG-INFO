Metadata-Version: 2.1
Name: raas
Version: 0.1.0
Summary: Implementation of Profit Maximization for a Robotics-as-a-Service Model
Home-page: https://github.com/jooooooos/degradation_learning
Author: Joo Seung Lee
Author-email: jooseung_lee@berkeley.edu
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.9.20
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: numpy>=1.26.4
Requires-Dist: scipy>=1.13.1
Requires-Dist: gurobipy>=12.0.3
Requires-Dist: torch>=2.6.0
Requires-Dist: pandas>=2.2.3
Requires-Dist: matplotlib>=3.9.2
Requires-Dist: tqdm>=4.66.5
Requires-Dist: numba>=0.60.0
Provides-Extra: dev
Requires-Dist: jupyter>=1.0.0; extra == "dev"
Requires-Dist: notebook>=7.2.2; extra == "dev"
Requires-Dist: pytest; extra == "dev"
Requires-Dist: sphinx; extra == "dev"

# Profit Maximization for a Robotics-as-a-Service Model

This repository implements the methods described in the paper "Profit Maximization for a Robotics-as-a-Service Model". It provides a simulation framework for optimizing pricing and replacement decisions in a RaaS setting using data-driven models for customer behavior and robot degradation.

For details on the methodology, please refer to the [paper PDF](profit_maximization_for_a_raas_model.pdf)

## Installation

### Using Conda (Recommended)
1. Create and activate the environment from `requirements.yml`:
```
conda env create -f requirements.yml
conda activate res
```
2. Install the package in editable mode:
`pip install -e .`

### Using Pip
If not using Conda:
```
pip install -r requirements.yml
pip install -e .
```

## Usage

### Running Simulations
Use the notebook in `notebooks/simulate.ipynb` to run experiments:
- Configure parameters in `src/raas/config.py`.
- Execute cells to simulate and analyze results.

### Plotting Results
Use `notebooks/plotting.ipynb` for visualizations:
- Load simulation outputs and generate plots (e.g., policy thresholds, profit rates).

### Extending the Code
- Core logic is in `src/raas/` (e.g., `simulation.py` for the main simulator).
- Experiments/scripts in `src/experiments/` (add custom runners here).

## Repository Structure
- `src/raas/`: Core package with models, learners, and simulator.
- `src/experiments/`: Scripts for running experiments.
- `notebooks/`: Jupyter notebooks for simulation and plotting.
- `setup.py`: For package installation.
- `requirements.yml`: Conda environment specs.
